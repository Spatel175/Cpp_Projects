#include<iostream>
#include<stdlib.h>
#include <fstream>
#include "Node.h"
#include "Tree.h"


#define len 129                                           
using namespace std;
using std::ifstream;

int findChar(char c, char arr[], int count[])
{

	for (int i = 0; i < len - 1; i++)
	{
		if (arr[i] == c )
		{
			count[i]++;
			return 1;
		}
	}
	return 0;
}

void swap(int* a, int* b, char* c, char* d)
{
	int temp = *a;
	*a = *b;
	*b = temp;
	temp = *c;
	*c = *d;
	*d = temp;
}

int Partition(int A[], char B[], int Start, int end)
{
	int x = A[end];
	int i = Start - 1;							// i = partition index, draws the boundry for A[end]; on the left side are values <= pivot and on the right side are values > pivot.
	for (int j = Start; j <= end - 1; j++)
	{
		if (A[j] <= x)// traverse and compare to end element
		{
			i++;
			swap(&A[i], &A[j], &B[i], &B[j]); // if end element id greater then swap 

		}

	}
	swap(&A[i + 1], &A[end], &B[i + 1], &B[end]);

	return (i + 1);
}

void quicksort(int A[], char B[], int Start, int end) // p is first index of first element and r is the index of last element
{
	if (Start < end)
	{
		int Pivot = Partition(A, B, Start, end);  // Pivot
		quicksort(A, B, Start, Pivot - 1);		// from start to pivot
		quicksort(A, B, Pivot + 1, end);		// from pivot + 1 to end 
	}

}

void getData()
{

	string myfile("Test.txt");
	char arr[len] = { NULL };
	int count[len] = { };
	FILE* stream;
	errno_t err = fopen_s(&stream, myfile.c_str(), "r");
	if (err != 0)
	{
		cout << "Could not open file" << endl;
		return;
	}
	char c;
	int k = 0;
	while ((c = fgetc(stream)) != EOF)
	{
		if (!findChar(c, arr, count))
		{
			arr[k] = c;
			count[k] = 1;
			k++;
		}
	}
	quicksort(count, arr, 0, len - 1);





	for (int i = 0; i < len - 1; i++)
	{

		cout << arr[i] << " " << count[i] << endl;
	}
	return;

}



int main()
{
	getData();

	return 0;
}