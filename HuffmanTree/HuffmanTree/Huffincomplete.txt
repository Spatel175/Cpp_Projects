#include <iostream>
#include <stdlib.h>
#include <fstream>
#include <list>
#include "Node.h"
#include "Tree.h"



#define len 129                                           
using namespace std;
using std::ifstream;

int findChar(char c, char arr[], int count[])
{

	for (int i = 0; i < len - 1; i++)
	{
		if (arr[i] == c )
		{
			count[i]++;
			return 1;
		}
	}
	return 0;
}

void quickSort(struct Node** n)
{
	(*n) = quickSortRecur(*n, endNode(*n));
	return;
}

list<Node> getData()
{
	list<Node> nodelist;
	string myfile("Test.txt"); 
	unsigned char character = 0;

	FILE* stream;
	errno_t err = fopen_s(&stream, myfile.c_str(), "r");
	if (err != 0)
	{
		cout << "Could not open file" << endl;
	}
	char c;
	while ((c = fgetc(stream)) != EOF)
	{
		std::string data;
		data = c;
		std::list<Node>::iterator it;
		for (it = nodelist.begin(); it != nodelist.end(); ++it)
		{
			if (it->character == data)
			{
				it->val++;
				break;
			}
		}
		if (it == nodelist.end())
		{
			nodelist.push_back(*(new Node(data)));

		}
	}
	return nodelist;

}


/*void HuffmanTree()
{
	while (nl->size() > 1)
	{
		Node a = nl.begin();
		nl->pop_front();
		Node b = nl->begin();
		nl->pop_front();
		Node p = (*(new Node(" ")));
		p.character = a.character + b.character;
		if (a.val < b.val)
		{
			p.left = &a;
			p.right = &b;
			p.val = a.val + b.val;

		}
		else if (a.val >= b.val)
		{
			p.left = &b;
			p.right = &a;
			p.val = a.val + b.val;

		}
		nl->push_back(p);
	}
}
*/
int main()
{
	list<Node> nl;
	nl = getData();
	//HuffmanTree();
	int a = 0;

	return;
}